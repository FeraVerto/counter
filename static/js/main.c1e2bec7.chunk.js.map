{"version":3,"sources":["App.module.css","Counter/Count.module.css","TunerBlock/TunerOfCounter/TunerOfCounter.module.css","Counter/Counter.tsx","Button/Button.tsx","TunerBlock/TunerOfCounter/TunerOfCounter.tsx","TunerBlock/TunerBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","count","maxNumber","className","s","counter","red_number","Button","onClick","disabled","title","TunerOfCounter","compareNumbers","classNameInput","setNumber","tuner_item","htmlFor","id","type","onChange","e","inputValue","Number","currentTarget","value","TunerBlock","setMaxNumber","compareMax","classMax","setStartNumber","compareStart","classStart","set","tuner_block","tuner","button_block","App","useState","startNumber","input","setClassMax","setClassStart","setCount","setDisabled","error","compare","max","start","count_block","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1e2bec7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"count_block\":\"App_count_block__-a2QT\",\"counter\":\"App_counter__o2xHs\",\"button_block\":\"App_button_block__2Qugb\",\"tuner_block\":\"App_tuner_block__2W4u_\",\"tuner\":\"App_tuner__18ufC\",\"input\":\"App_input__2NxBo\",\"error\":\"App_error__1umzI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Count_counter__1iNrF\",\"red_number\":\"Count_red_number__3aekN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner_item\":\"TunerOfCounter_tuner_item__2wrkR\"};","import React from 'react'\nimport s from './Count.module.css'\n\nexport type CounterPropsType = {\n    count: number | string,\n    maxNumber: number | string,\n    startNumber: number | string\n}\n\nexport function Counter({count, maxNumber}: CounterPropsType) {\n    return <div className={s.counter}>\n        <div  className={count === maxNumber && count !== 0 ? `${s.red_number}` : \"\"}>\n           <p>{count}</p>\n        </div>\n    </div>\n}","import React from 'react';\n\ntype ButtonPropsType = {\n    onClick: () => void,\n    title: string,\n    disabled: boolean\n}\n\n\nfunction Button({onClick, disabled, title}: ButtonPropsType) {\n\n    return (\n        <button onClick={onClick}\n                disabled={disabled}>{title}</button>\n    );\n}\n\nexport default Button;\n","import React, {ChangeEvent} from 'react'\n/*import './../App.module.css'*/\nimport s from \"./TunerOfCounter.module.css\"\n\nexport type TunerOfCounter = {\n    title: string\n    setNumber: (number: number | string) => void\n    compareNumbers: (value: number | string) => void\n    classNameInput: string\n}\n\nexport function TunerOfCounter({compareNumbers, title, classNameInput, setNumber}: TunerOfCounter) {\n\n    let onChangeInputTuner = (e: ChangeEvent<HTMLInputElement>) => {\n        let inputValue = Number(e.currentTarget.value)\n        setNumber(inputValue)\n        //отправляет inputValue в compareMax или в compareStart\n        compareNumbers(inputValue)\n    }\n\n    return (\n        <div className={s.tuner_item}>\n            <label htmlFor=\"1\">\n                {title}\n            </label>\n            <input\n                className={classNameInput}\n                id=\"1\"\n                type=\"number\"\n                onChange={onChangeInputTuner}/>\n        </div>\n    )\n}\n\n//Функция для сравнения значения из инпута со значением пришедшим из стейта\n//compare - функция для обозначения способа сравнения двух значений\n/*let checkedNumber = (inputValue: number, num: number | string, compare: (a: number, b: number) => boolean) => {\n    let n = Number(num)\n    if (!isNaN(n) && (inputValue < 0 || compare(inputValue,  n))) {\n        props.setCount('Incorrect value')\n    }\n}\ncheckedNumber(inputValue, props.number.max, (a, b) => a>=b)*/","import React from 'react';\nimport s from \"../App.module.css\";\nimport {TunerOfCounter} from \"./TunerOfCounter/TunerOfCounter\";\nimport Button from \"../Button/Button\";\n\nexport type TunerBlockType = {\n    setMaxNumber: (maxNumber: number | string) => void\n    compareMax: (value: string | number) => void\n    classMax: string\n    setStartNumber: (startNumber: number | string) => void\n    compareStart: (value: string | number) => void\n    classStart: string\n    set: () => void\n    disabled: boolean\n}\n\n\nexport function TunerBlock({setMaxNumber, compareMax, classMax, setStartNumber, compareStart, classStart, set, disabled}: TunerBlockType) {\n    return <div className={s.tuner_block}>\n        <div className={s.tuner}>\n\n            <TunerOfCounter\n                title={\"max value:\"}\n                setNumber={setMaxNumber}\n                compareNumbers={compareMax}\n                classNameInput={classMax}\n            />\n\n            <TunerOfCounter\n                title={\"start value:\"}\n                setNumber={setStartNumber}\n                compareNumbers={compareStart}\n                classNameInput={classStart}\n            />\n\n        </div>\n        <div className={s.button_block}>\n            <Button onClick={set} title={\"set\"}\n                    disabled={disabled}\n            />\n        </div>\n    </div>\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {Counter} from \"./Counter/Counter\";\nimport Button from \"./Button/Button\";\nimport {TunerOfCounter} from \"./TunerBlock/TunerOfCounter/TunerOfCounter\";\nimport {TunerBlock} from \"./TunerBlock/TunerBlock\";\n\nfunction App() {\n    //стейт для максимального и стартового числа\n    let [maxNumber, setMaxNumber] = useState<number | string>(0)\n    let [startNumber, setStartNumber] = useState<number | string>(0)\n    //стейт для выведения ошибок в каждом инпуте по отдельности\n    let [classMax, setClassMax] = useState<string>(`${s.input}`)\n    let [classStart, setClassStart] = useState<string>(`${s.input}`)\n    //стейт для числа, которое выводится в Counter\n    let [count, setCount] = useState<number | string>(\"enter values and press 'set'\")\n    //стейт для дизэйбла кнопки set при ошибке или после установки значений в maxNumber и startNumber\n    let [disabled, setDisabled] = useState<boolean>(false)\n\n    let error = `${s.error}`\n    let input = `${s.input}`\n\n    //Функция для сравнения значения инпутов  max и start\n    let compare = (max: string | number, start: string | number) => {\n        if (max <= start || (max < 0 || start < 0)) {\n            setCount('Incorrect value')\n            if (max === start) {\n                setClassStart(error)\n                setClassMax(error)\n                setDisabled(true)\n            }\n        } else {\n            setCount(\"enter values and press 'set'\")\n            setClassStart(input)\n            setClassMax(input)\n            setDisabled(false)\n        }\n    }\n\n    //Функции compareMax и compareStart - обертка для функции compare,\n    //которая принимает значение из инпута и отдает для сравнения compare\n    let compareMax = (value: string | number) => {\n        compare(value, startNumber)\n        //Валидация для инпута \"max value...\"\n        if(value < 0 || value <= startNumber) {\n            setClassMax(error)\n            setDisabled(true)\n        } else {\n            setClassMax(input)\n            setDisabled(false)\n        }\n    }\n\n    let compareStart = (value: string | number) => {\n        compare(maxNumber, value)\n        //Валидация для инпута \"start value...\"\n        if(value < 0 || value >= maxNumber) {\n            setClassStart(error)\n            setDisabled(true)\n        } else {\n            setClassStart(input)\n            setDisabled(false)\n        }\n    }\n\n    function increment() {\n        if (count < maxNumber) {\n            //не изменяем state напрямую!\n            let newValue = Number(count) + 1\n            setCount(newValue)\n        }\n    }\n\n    function reset() {\n        if (count > startNumber) {\n            setCount(startNumber)\n        }\n    }\n\n//устанавливаем стартовое значение в counter\n    function set() {\n        setCount(startNumber)\n        setDisabled(true)\n    }\n\n    return (\n\n        <div className={s.App}>\n\n            <TunerBlock setMaxNumber={setMaxNumber}\n                        compareMax={compareMax}\n                        classMax={classMax}\n                        setStartNumber={setStartNumber}\n                        compareStart={compareStart}\n                        classStart={classStart}\n                        set={set}\n                        disabled={disabled}\n            />\n\n            <div className={s.count_block}>\n                <Counter count={count} maxNumber={maxNumber} startNumber={startNumber}/>\n                <div className={s.button_block}>\n                    <Button onClick={increment} title={\"inc\"} disabled={count === maxNumber}/>\n                    <Button onClick={reset} title={\"reset\"} disabled={count === startNumber}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}