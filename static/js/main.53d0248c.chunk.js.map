{"version":3,"sources":["Counter/Counter.tsx","Button/Button.tsx","TunerOfCounter/TunerOfCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx","TunerOfCounter/TunerOfCounter.module.css"],"names":["Counter","props","className","count","maxNumber","Button","onClick","disabled","title","TunerOfCounter","id","setNumber","number","setCount","finalInputClassName","s","tuner_item","htmlFor","max","start","error","type","onChange","e","inputValue","Number","currentTarget","value","checkedNumber","num","App","useState","setMaxNumber","startNumber","setStartNumber","classNameMax","error_max","input","classNameStart","error_start","objNumber","set","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.53d0248c.chunk.js","sourcesContent":["import React from 'react'\nimport './../App.css'\n\nexport type CounterPropsType = {\n    count: number | string,\n    maxNumber: number | string,\n    startNumber: number | string\n}\n\nexport function Counter(props: CounterPropsType) {\n    return <div className=\"counter\">\n        <div  className={props.count === props.maxNumber && props.count !== 0 ? \"red_number\" : \"\"}>\n           <p>{props.count}</p>\n        </div>\n    </div>\n}","import React from 'react';\nimport './../App.css';\n\ntype ButtonPropsType = {\n    onClick: () => void,\n    title: string,\n    disabled: boolean\n}\n\n\nfunction Button(props: ButtonPropsType) {\n\n    return (\n        <button onClick={props.onClick}\n                disabled={props.disabled}>{props.title}</button>\n    );\n}\n\nexport default Button;\n","import React, {ChangeEvent} from 'react'\n/*import './../App.css'*/\nimport s from \"./TunerOfCounter.module.css\"\n\nexport type TunerOfCounter = {\n    id: string\n    title: string\n    setNumber: (number: number | string) => void\n    number: { max: number | string, start: number | string }\n    setCount: (count: number | string) => void\n\n    finalInputClassName: string\n}\n\nexport function TunerOfCounter({id, title, setNumber, number, setCount, finalInputClassName}: TunerOfCounter) {\n\n    let onChangeInputTuner = (e: ChangeEvent<HTMLInputElement>) => {\n        let inputValue = Number(e.currentTarget.value)\n\n        //Функция для сравнения значения из инпута со значением пришедшим из стейта\n        //compare - функция для обозначения способа сравнения двух значений\n        /*let checkedNumber = (inputValue: number, num: number | string, compare: (a: number, b: number) => boolean) => {\n            let n = Number(num)\n\n            if (!isNaN(n) && (inputValue < 0 || compare(inputValue,  n))) {\n                props.setCount('Incorrect value')\n            }\n        }\n        checkedNumber(inputValue, props.number.max, (a, b) => a>=b)*/\n\n        //Функция возвращает проверку в зависимости от входящего id\n        let checkedNumber = (inputValue: number, num: number | string, id: string) => {\n            switch (id) {\n                case \"1\":\n                    return inputValue < 0 || inputValue <= num\n                case \"2\":\n                    return inputValue < 0 || inputValue >= num\n                default:\n                    break\n            }\n        }\n\n        //Валидация для инпута\n        if (checkedNumber(inputValue, number.start, id) || checkedNumber(inputValue, number.max, id)) {\n            setCount('Incorrect value')\n\n        } else {\n            setCount(\"enter values and press 'set'\")\n        }\n\n        setNumber(inputValue)\n    }\n\n    /*console.log(finalInputClassName)*/\n    /*const finalInputClassName = error ? `${s.errorInput} ${className}` : s.superInput;*/\n    return (\n\n        <div className={s.tuner_item}>\n            <label htmlFor=\"1\">\n                {title}\n            </label>\n            <input\n                className={((number.max <= number.start) && (number.max !== 0 || number.start !== 0) ? `${s.error}` : finalInputClassName)}\n                id=\"1\" type=\"number\" onChange={onChangeInputTuner}/>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport Button from \"./Button/Button\";\nimport {TunerOfCounter} from \"./TunerOfCounter/TunerOfCounter\";\nimport {NavLink} from \"react-router-dom\";\nimport s from \"./TunerOfCounter/TunerOfCounter.module.css\";\n\nfunction App() {\n\n    let [maxNumber, setMaxNumber] = useState<number | string>(0)\n    let [startNumber, setStartNumber] = useState<number | string>(0)\n    let [count, setCount] = useState<number | string>(\"enter values and press 'set'\")\n\n    let classNameMax = maxNumber < 0  ? `${s.error_max}` : `${s.input}`;\n    let classNameStart = startNumber < 0 ? `${s.error_start}` : `${s.input}`;\n\n\n    let objNumber = {\n        max: maxNumber,\n        start: startNumber\n    }\n\n    function increment() {\n        if (count < maxNumber) {\n            //не изменяем state напрямую!\n            let newValue = Number(count) + 1\n            setCount(newValue)\n        }\n    }\n\n    function reset() {\n        if (count > startNumber) {\n            setCount(startNumber)\n        }\n    }\n\n    //устанавливаем стартовое значение в counter\n    function set() {\n        setCount(startNumber)\n    }\n\n    return (\n\n        <div className=\"App\">\n\n            <div className=\"tuner_block\">\n                {/*передаем в компонент с инпутом функции из локального стейта, setMaxNumber и setStartNumber*/}\n                <div className=\"tuner\">\n                    <TunerOfCounter id=\"1\"\n                                    title={\"max value:\"}\n                                    setNumber={setMaxNumber}\n                                    number={objNumber}\n                                    setCount={setCount}\n\n                                    finalInputClassName={classNameMax}\n                    />\n                    <TunerOfCounter id=\"2\"\n                                    title={\"start value:\"}\n                                    setNumber={setStartNumber}\n                                    number={objNumber}\n                                    setCount={setCount}\n\n                                    finalInputClassName={classNameStart}\n                    />\n                </div>\n                <div className=\"button_block\">\n                    <Button onClick={set} title={\"set\"}\n                            disabled={(maxNumber <= 0 && startNumber < 0) || (maxNumber <= startNumber)}/>\n                </div>\n            </div>\n\n            <div className=\"count_block\">\n                <Counter count={count} maxNumber={maxNumber} startNumber={startNumber}/>\n                <div className=\"button_block\">\n                    <Button onClick={increment} title={\"inc\"} disabled={count === maxNumber}/>\n                    <Button onClick={reset} title={\"reset\"} disabled={count === startNumber}/>\n                    <Button onClick={set} title={\"set\"} disabled={maxNumber < 0 && startNumber < 0}/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner_item\":\"TunerOfCounter_tuner_item__3R6Wk\",\"input\":\"TunerOfCounter_input__1hEOQ\",\"error\":\"TunerOfCounter_error__2VtkS\",\"error_max\":\"TunerOfCounter_error_max__3hC3e\",\"error_start\":\"TunerOfCounter_error_start__2rMnS\"};"],"sourceRoot":""}