{"version":3,"sources":["App.module.css","TunerBlock/TunerBlock.module.css","CounterBlock/CounterBlock.module.css","CounterBlock/Counter/Counter.module.css","TunerBlock/TunerOfCounter/TunerOfCounter.module.css","TunerBlock/TunerOfCounter/TunerOfCounter.tsx","Button/Button.tsx","TunerBlock/TunerBlock.tsx","CounterBlock/Counter/Counter.tsx","CounterBlock/CounterBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TunerOfCounter","compareNumbers","title","classNameInput","setNumber","className","s","tuner_item","htmlFor","id","type","onChange","e","inputValue","Number","currentTarget","value","Button","onClick","disabled","TunerBlock","setMaxNumber","compareMax","classMax","setStartNumber","compareStart","classStart","set","tuner_block","tuner","button_block","to","Counter","count","maxNumber","counter","red_number","CounterBlock","startNumber","increment","reset","count_block","App","useState","input","setClassMax","setClassStart","setCount","setDisabled","error","compare","max","start","newValue","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a329037.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"input\":\"App_input__2NxBo\",\"error\":\"App_error__1umzI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner_block\":\"TunerBlock_tuner_block__1qzSF\",\"tuner\":\"TunerBlock_tuner__3jEL6\",\"button_block\":\"TunerBlock_button_block__11954\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"count_block\":\"CounterBlock_count_block__MoMxL\",\"button_block\":\"CounterBlock_button_block__1uXsn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__tAZoP\",\"red_number\":\"Counter_red_number__2a9pP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner_item\":\"TunerOfCounter_tuner_item__2wrkR\"};","import React, {ChangeEvent} from 'react'\n/*import './../App.module.css'*/\nimport s from \"./TunerOfCounter.module.css\"\n\nexport type TunerOfCounter = {\n    title: string\n    setNumber: (number: number | string) => void\n    compareNumbers: (value: number | string) => void\n    classNameInput: string\n}\n\nexport function TunerOfCounter({compareNumbers, title, classNameInput, setNumber}: TunerOfCounter) {\n\n    let onChangeInputTuner = (e: ChangeEvent<HTMLInputElement>) => {\n        let inputValue = Number(e.currentTarget.value)\n        setNumber(inputValue)\n        //отправляет inputValue в compareMax или в compareStart\n        compareNumbers(inputValue)\n    }\n\n    return (\n        <div className={s.tuner_item}>\n            <label htmlFor=\"1\">\n                {title}\n            </label>\n            <input\n                className={classNameInput}\n                id=\"1\"\n                type=\"number\"\n                onChange={onChangeInputTuner}/>\n        </div>\n    )\n}\n\n//Функция для сравнения значения из инпута со значением пришедшим из стейта\n//compare - функция для обозначения способа сравнения двух значений\n/*let checkedNumber = (inputValue: number, num: number | string, compare: (a: number, b: number) => boolean) => {\n    let n = Number(num)\n    if (!isNaN(n) && (inputValue < 0 || compare(inputValue,  n))) {\n        props.setCount('Incorrect value')\n    }\n}\ncheckedNumber(inputValue, props.number.max, (a, b) => a>=b)*/","import React from 'react';\n\ntype ButtonPropsType = {\n    onClick: () => void,\n    title: string,\n    disabled: boolean\n}\n\n\nfunction Button({onClick, disabled, title}: ButtonPropsType) {\n\n    return (\n        <button onClick={onClick}\n                disabled={disabled}>{title}</button>\n    );\n}\n\nexport default Button;\n","import React from 'react';\nimport s from \"../TunerBlock/TunerBlock.module.css\";\nimport {TunerOfCounter} from \"./TunerOfCounter/TunerOfCounter\";\nimport Button from \"../Button/Button\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type TunerBlockType = {\n    setMaxNumber: (maxNumber: number | string) => void\n    compareMax: (value: string | number) => void\n    classMax: string\n    setStartNumber: (startNumber: number | string) => void\n    compareStart: (value: string | number) => void\n    classStart: string\n    set: () => void\n    disabled: boolean\n}\n\n\nexport function TunerBlock({setMaxNumber, compareMax, classMax, setStartNumber, compareStart, classStart, set, disabled}: TunerBlockType) {\n    return (\n        <div className={s.tuner_block}>\n            <div className={s.tuner}>\n\n                <TunerOfCounter\n                    title={\"max value:\"}\n                    setNumber={setMaxNumber}\n                    compareNumbers={compareMax}\n                    classNameInput={classMax}\n                />\n\n                <TunerOfCounter\n                    title={\"start value:\"}\n                    setNumber={setStartNumber}\n                    compareNumbers={compareStart}\n                    classNameInput={classStart}\n                />\n\n            </div>\n            <div className={s.button_block}>\n                <NavLink to=\"/counter\"><Button onClick={set} title={\"set\"}\n                                               disabled={disabled}\n                /></NavLink>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport s from './Counter.module.css'\n\nexport type CounterPropsType = {\n    count: number | string,\n    maxNumber: number | string,\n    startNumber: number | string\n}\n\nexport function Counter({count, maxNumber}: CounterPropsType) {\n    return <div className={s.counter}>\n        <div  className={count === maxNumber && count !== 0 ? `${s.red_number}` : \"\"}>\n           <p>{count}</p>\n        </div>\n    </div>\n}","import React from 'react';\n/*import s from \"../App.module.css\";*/\nimport s from \"./CounterBlock.module.css\"\nimport {Counter} from \"./Counter/Counter\";\nimport Button from \"../Button/Button\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type CounterBlockType = {\n    count: number | string\n    maxNumber: number | string\n    startNumber: number | string\n    increment: () => void\n    reset: () => void\n    set: () => void\n}\n\nexport function CounterBlock({count, maxNumber, startNumber, increment, reset, set}: CounterBlockType) {\n    return (\n        <div className={s.count_block}>\n            <Counter count={count} maxNumber={maxNumber} startNumber={startNumber}/>\n            <div className={s.button_block}>\n                <Button onClick={increment} title={\"inc\"} disabled={count === maxNumber}/>\n                <Button onClick={reset} title={\"reset\"} disabled={count === startNumber}/>\n                <NavLink to=\"/tuner\"><Button onClick={set} title={\"set\"} disabled={false}/></NavLink>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {TunerBlock} from \"./TunerBlock/TunerBlock\";\nimport {Route} from \"react-router-dom\";\nimport {CounterBlock} from \"./CounterBlock/CounterBlock\";\n\nfunction App() {\n    //стейт для максимального и стартового числа\n    let [maxNumber, setMaxNumber] = useState<number | string>(0)\n    let [startNumber, setStartNumber] = useState<number | string>(0)\n    //стейт для выведения ошибок в каждом инпуте по отдельности\n    let [classMax, setClassMax] = useState<string>(`${s.input}`)\n    let [classStart, setClassStart] = useState<string>(`${s.input}`)\n    //стейт для числа, которое выводится в Counter\n    let [count, setCount] = useState<number | string>(\"enter values and press 'set'\")\n    //стейт для дизэйбла кнопки set при ошибке или после установки значений в maxNumber и startNumber\n    let [disabled, setDisabled] = useState<boolean>(false)\n\n    let error = `${s.error}`\n    let input = `${s.input}`\n\n    //Функция для сравнения значения инпутов  max и start\n    let compare = (max: string | number, start: string | number) => {\n        if (max <= start || (max < 0 || start < 0)) {\n            setCount('Incorrect value')\n            if (max === start) {\n                setClassStart(error)\n                setClassMax(error)\n                setDisabled(true)\n            }\n        } else {\n            setCount(\"enter values and press 'set'\")\n            setClassStart(input)\n            setClassMax(input)\n            setDisabled(false)\n        }\n    }\n\n    //Функции compareMax и compareStart - обертка для функции compare,\n    //которая принимает значение из инпута и отдает для сравнения compare\n    let compareMax = (value: string | number) => {\n        compare(value, startNumber)\n        //Валидация для инпута \"max value...\"\n        if(value < 0 || value <= startNumber) {\n            setClassMax(error)\n            setDisabled(true)\n        } else {\n            setClassMax(input)\n            setDisabled(false)\n        }\n    }\n\n    let compareStart = (value: string | number) => {\n        compare(maxNumber, value)\n        //Валидация для инпута \"start value...\"\n        if(value < 0 || value >= maxNumber) {\n            setClassStart(error)\n            setDisabled(true)\n        } else {\n            setClassStart(input)\n            setDisabled(false)\n        }\n    }\n\n    function increment() {\n        if (count < maxNumber) {\n            //не изменяем state напрямую!\n            let newValue = Number(count) + 1\n            setCount(newValue)\n        }\n    }\n\n    function reset() {\n        if (count > startNumber) {\n            setCount(startNumber)\n        }\n    }\n\n//устанавливаем стартовое значение в counter\n    function set() {\n        setCount(startNumber)\n        setDisabled(true)\n    }\n\n    return (\n        <div className={s.App}>\n            <Route exact path=\"/tuner\" render={() => <TunerBlock setMaxNumber={setMaxNumber}\n                                                             compareMax={compareMax}\n                                                             classMax={classMax}\n                                                             setStartNumber={setStartNumber}\n                                                             compareStart={compareStart}\n                                                             classStart={classStart}\n                                                             set={set}\n                                                             disabled={disabled}\n            />}/>\n            <Route exact path=\"/counter\" render={() => <CounterBlock count={count}\n                                                                     maxNumber={maxNumber}\n                                                                     startNumber={startNumber}\n                                                                     increment={increment}\n                                                                     reset={reset}\n                                                                     set={set}\n            />}/>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}