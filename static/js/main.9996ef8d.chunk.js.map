{"version":3,"sources":["Counter/Counter.tsx","Button/Button.tsx","TunerOfCounter/TunerOfCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Counter","props","className","count","maxNumber","Button","onClick","disabled","title","TunerOfCounter","htmlFor","id","type","App","useState","setCount","increment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAQO,SAASA,EAAQC,GACpB,OAAO,qBAAKC,UAAU,UAAf,SACH,qBAAMA,UAAWD,EAAME,QAAUF,EAAMG,UAAY,aAAe,GAAlE,SACG,4BAAIH,EAAME,YCONE,MARf,SAAgBJ,GAEZ,OACI,wBAAQK,QAASL,EAAMK,QACfC,SAAUN,EAAMM,SADxB,SACmCN,EAAMO,SCT1C,SAASC,EAAeR,GAC3B,OACI,sBAAKC,UAAU,QAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBAAOQ,QAAQ,MAAf,wBAGA,uBAAOC,GAAG,MAAMC,KAAK,cAEzB,sBAAKV,UAAU,aAAf,UACI,uBAAOQ,QAAQ,QAAf,0BAGA,uBAAOC,GAAG,QAAQC,KAAK,iBC4BxBC,MAxCf,WAAgB,IAAD,EAEaC,mBAAS,GAFtB,mBAENX,EAFM,KAECY,EAFD,KAMX,SAASC,IACDb,EAJQ,GAORY,EADeZ,EAAQ,GAW/B,OACI,sBAAKD,UAAU,MAAf,UACI,sBAAKA,UAAU,cAAf,UACI,cAACO,EAAD,IACA,qBAAMP,UAAU,eAAhB,SAEI,cAAC,EAAD,CAAQI,QAASU,EAAWR,MAAO,MAAOD,SAvB1C,IAuBoDJ,SAG5D,sBAAKD,UAAU,cAAf,UACI,cAACF,EAAD,CAASG,MAAOA,EAAOC,UA3BnB,IA4BJ,sBAAKF,UAAU,eAAf,UACI,cAAC,EAAD,CAAQI,QAASU,EAAWR,MAAO,MAAOD,SA7B1C,IA6BoDJ,IACpD,cAAC,EAAD,CAAQG,QAnBxB,WACQH,EAXQ,GAYRY,EAZQ,IA6BwBP,MAAO,QAASD,SA7BxC,IA6BkDJ,cCzBvDc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9996ef8d.chunk.js","sourcesContent":["import React from 'react'\nimport './../App.css'\n\nexport type CounterPropsType = {\n    count: number,\n    maxNumber: number\n}\n\nexport function Counter(props: CounterPropsType) {\n    return <div className=\"counter\">\n        <div  className={props.count === props.maxNumber ? \"red_number\" : \"\"}>\n           <p>{props.count}</p>\n        </div>\n    </div>\n}","import React from 'react';\nimport './../App.css';\n\ntype ButtonPropsType = {\n    onClick: () => void,\n    title: string,\n    disabled: boolean\n}\n\n\nfunction Button(props: ButtonPropsType) {\n\n    return (\n        <button onClick={props.onClick}\n                disabled={props.disabled}>{props.title}</button>\n    );\n}\n\nexport default Button;\n","import React from 'react'\nimport './../App.css'\n\nexport type TunerOfCounter = {}\n\nexport function TunerOfCounter(props: TunerOfCounter) {\n    return (\n        <div className=\"tuner\">\n            <div className=\"tuner_item\">\n                <label htmlFor=\"max\">\n                    max value:\n                </label>\n                <input id=\"max\" type=\"number\"/>\n            </div>\n            <div className=\"tuner_item\">\n                <label htmlFor=\"start\">\n                    start value:\n                </label>\n                <input id=\"start\" type=\"number\"/>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport Button from \"./Button/Button\";\nimport {TunerOfCounter} from \"./TunerOfCounter/TunerOfCounter\";\n\nfunction App() {\n\n    let [count, setCount] = useState(0)\n    let maxNumber = 5\n    let minNumber = 0\n\n    function increment() {\n        if (count < maxNumber) {\n            //не изменяем state напрямую!\n            let newValue = count + 1\n            setCount(newValue)\n        }\n    }\n\n    function reset() {\n        if (count > minNumber) {\n            setCount(minNumber)\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"tuner_block\">\n                <TunerOfCounter/>\n                <div  className=\"button_block\">\n                    {/*Логика скопирована с предыдущей кнопки*/}\n                    <Button onClick={increment} title={\"set\"} disabled={count === maxNumber}/>\n                </div>\n            </div>\n            <div className=\"count_block\">\n                <Counter count={count} maxNumber={maxNumber}/>\n                <div className=\"button_block\">\n                    <Button onClick={increment} title={\"inc\"} disabled={count === maxNumber}/>\n                    <Button onClick={reset} title={\"reset\"} disabled={count === minNumber}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}